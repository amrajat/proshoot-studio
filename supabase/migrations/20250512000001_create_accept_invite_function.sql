CREATE OR REPLACE FUNCTION public.accept_organization_invite_with_credit_transfer(
    p_user_id UUID, -- The user accepting the invite
    p_organization_id UUID,
    p_invite_token TEXT -- This should be the org's universal invite_token
)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER -- Necessary to check token and modify members/credits
SET search_path = public
AS $$
DECLARE
    v_org_owner_id UUID;
    v_org_name TEXT;
    v_org_token TEXT;
    v_new_member_id UUID;
    v_credit_deducted BOOLEAN := false;
    v_deduction_error TEXT := NULL;
    result JSONB;
BEGIN
    -- Fetch organization details including the owner and the current universal token
    SELECT owner_user_id, name, invite_token
    INTO v_org_owner_id, v_org_name, v_org_token
    FROM public.organizations
    WHERE id = p_organization_id;

    -- Check if organization exists
    IF NOT FOUND THEN
        RETURN jsonb_build_object('error', 'Organization not found.');
    END IF;

    -- Check if token matches (must match the organization's current universal token)
    IF v_org_token IS NULL OR v_org_token != p_invite_token THEN
        RETURN jsonb_build_object('error', 'Invalid or expired invite token.');
    END IF;

    -- Check if user is already a member
    IF EXISTS (SELECT 1 FROM public.organization_members WHERE user_id = p_user_id AND organization_id = p_organization_id) THEN
        RETURN jsonb_build_object('success', true, 'message', 'Already a member.', 'organization_name', v_org_name);
    END IF;

    -- Insert user into organization_members
    -- Note: We use role 'member' by default for universal link joins.
    -- Email-specific invites could potentially specify a role.
    INSERT INTO public.organization_members (user_id, organization_id, role)
    VALUES (p_user_id, p_organization_id, 'member'::organization_role)
    RETURNING id INTO v_new_member_id;

    -- Attempt to deduct 1 team credit from the organization owner
    BEGIN
        SELECT transfer_org_team_credit(
            p_org_id := p_organization_id,
            p_admin_user_id := v_org_owner_id,
            p_amount := 1,
            p_transaction_type := 'invite_accept'::transaction_type,
            p_description := 'Credit deducted for invite acceptance by user ' || p_user_id::TEXT
        )
        INTO v_credit_deducted; -- Will be TRUE if successful
    EXCEPTION
        WHEN OTHERS THEN
            -- Capture the error message if deduction fails (e.g., insufficient funds)
            v_deduction_error := SQLERRM;
            RAISE WARNING 'Credit deduction failed for org % owner % upon invite accept by user %: %', p_organization_id, v_org_owner_id, p_user_id, v_deduction_error;
            -- Do not stop the process, allow user to join even if credit deduction fails
            v_credit_deducted := false;
    END;

    -- Build the success response
    result := jsonb_build_object(
        'success', true, 
        'member_id', v_new_member_id, 
        'organization_name', v_org_name,
        'credit_deducted', v_credit_deducted -- Indicate if deduction succeeded
    );

    IF v_deduction_error IS NOT NULL THEN
        result := result || jsonb_build_object('credit_deduction_error', v_deduction_error);
    END IF;

    -- The universal token remains active until manually regenerated by the admin.

    RETURN result;

EXCEPTION
    WHEN others THEN
        RAISE WARNING 'Error in accept_organization_invite_with_credit_transfer: %', SQLERRM;
        RETURN jsonb_build_object('error', 'An unexpected error occurred: ' || SQLERRM);
END;
$$;

-- Grant execute permission on the function to authenticated users
GRANT EXECUTE ON FUNCTION public.accept_organization_invite_with_credit_transfer(UUID, UUID, TEXT) TO authenticated;

-- RLS policies for credits table if needed, assuming the SECURITY DEFINER function handles permissions.
-- Ensure policies on organization_members allow insert by this function or by the user if not already covered.
-- The function is SECURITY DEFINER, so it runs with the permissions of the user who defined it (typically a superuser).
-- Make sure the definer has necessary permissions on 'organizations', 'credits', 'organization_members'. 